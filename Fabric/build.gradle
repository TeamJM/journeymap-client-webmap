buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }

    dependencies {
        classpath group: 'com.modrinth.minotaur', name: 'Minotaur', version: '2.+'
    }
}

plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'io.github.juuxel.loom-quiltflower' version '1.8.0'
}

apply plugin: "com.modrinth.minotaur"
apply plugin: "maven-publish"

repositories {
    maven {
        name = "JourneyMap (Public)"
        url = "https://jm.gserv.me/repository/maven-public/"
    }
    // used for local mods in the libs folder
    flatDir {
        dirs 'libs'
    }

    maven {
        url "https://www.cursemaven.com"
    }

    maven {
        url "https://maven.parchmentmc.org"
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

ext {
    srcWebDir = "src/main/resources/assets/journeymap/ui/"
    buildWebDir = "build/resources/main/assets/journeymap/ui/"
    jmApiClassesDir = file("build/journeymap-api")
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

def loaderName = "fabric"
version = "${project.minecraft_version}-${project.mod_version}"
def modVersion = "${project.mod_version}"

group = project.group_id
archivesBaseName = "${project.base_name}-${loaderName}"
configurations {
//    shade
}

configurations.all {
    // Check for snapshots more frequently than Gradle's default of 1 day. 0 = every build.
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

loom {
    accessWidenerPath = file("src/main/resources/journeymap_webmap.accesswidener")
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.mappings}:${project.parchment_mappings}@zip")
    }

    modCompileOnly group: 'info.journeymap', name: 'journeymap-api-fabric', version: "${project.journeymap_api_version}-${project.minecraft_version}-SNAPSHOT", changing: true
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
//    modImplementation "curse.maven:journeymap-32274:${project.jourenymap_fabric_version}"
    compileOnly project(":Common")

    implementation include(group: 'info.journeymap', name: 'webmap-client', version: project.journeymap_webmap_version, changing: true)
    implementation include(group: 'io.javalin', name: 'javalin', version: '6.1.6')
    //external libs shade
    compileOnly include(group: 'org.eclipse.jetty', name: 'jetty-server', version: '11.0.20')
    compileOnly include(group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '11.0.20')
    compileOnly include(group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '11.0.20')
    compileOnly include(group: 'org.eclipse.jetty', name: 'jetty-security', version: '11.0.20')
    compileOnly include(group: 'org.eclipse.jetty', name: 'jetty-io', version: '11.0.20')
    compileOnly include(group: 'org.eclipse.jetty', name: 'jetty-http', version: '11.0.20')
    compileOnly include(group: 'org.eclipse.jetty', name: 'jetty-util', version: '11.0.20')
    compileOnly include(group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '11.0.20')
    compileOnly include(group: 'org.eclipse.jetty', name: 'jetty-xml', version: '11.0.20')
    compileOnly include(group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.1.0')
    compileOnly include(group: 'org.eclipse.jetty.toolchain', name: 'jetty-jakarta-servlet-api', version: '5.0.2')

    compileOnly include(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.9.23')

//    compileOnly include (group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.3')
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
    options.encoding = "UTF-8"
}

loom {
    accessWidenerPath.set(project(":Common").file("src/main/resources/journeymap_webmap.accesswidener"))
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run/fabric/client")
            programArg("--username=Dev")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run/fabric/server")
        }
    }
}

sourceSets {
    main.kotlin.srcDirs = ['src/main/java', 'src/main/kotlin']
}

remapJar {
    archiveClassifier.set("")
}


// This block of code expands all the gradle properties in the specified resource targets.
// It copies them into the targets and expands all the defined properties.
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', 'license.txt']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [version   : modVersion,
                         modVersion: modVersion,
                         mcversion : project.minecraft_version,
                         date      : getDate(),]

processResources() {
    from project(":Common").sourceSets.main.resources
    // this will ensure that this task is redone when the versions change.
    inputs.properties replaceProperties
    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand 'version': modVersion,
                'date': getDate(),
                'mcversion': project.minecraft_version,
                'loaderversion': project.fabric_api_version,
                'loadername': 'fabric'
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

task processDocs(type: Copy) {
    // update docs
    from(file("../doc/")) {
        include '*.html'
        expand 'version': modVersion,
                'date': getDate(),
                'mcversion': project.minecraft_version,
                'loaderversion': project.fabric_api_version,
                'loadername': 'fabric'
    }
    into 'build/doc'
}

clean.doFirst {
    // Remove the Webpack bundled assets as part of the clean task
    delete "$projectDir/src/main/resources/assets/journeymap/web/"
}

jar {
    archiveClassifier.set("slim")
    dependsOn 'processDocs'
    manifest {
        attributes(["Specification-Title"     : project.name,
                    "Specification-Vendor"    : project.group_id,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : project.group_id,
                    "Implementation-URL"      : "http://journeymap.info",
                    "Implementation-Timestamp": getDate()])
    }
}


artifacts {
    archives remapJar
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format(project.dateFormat)
    return formattedDate
}

// Automated upload to CurseForge for the win!
if (!project.hasProperty("curseForgeApiKey")) {
    ext.curseForgeApiKey = project.findProperty("curseforge_api_key") ?: "notset"
}
if (!project.hasProperty("modrinthApiKey")) {
    ext.modrinthApiKey = project.findProperty("modrinth_api_key") ?: "notset"
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {

    apiToken = "${curseForgeApiKey}"
    def mainFile = upload(curseforge_project_id, remapJar)
    mainFile.displayName = "${project.mod_id}-${version}+${loaderName}"
    mainFile.releaseType = release_type
    mainFile.addModLoader("Fabric", "Quilt")
    mainFile.addJavaVersion("Java 21")
    mainFile.addGameVersion("${project.minecraft_version}", "1.21.1")
    mainFile.addRelation("journeymap", "requiredDependency")
    mainFile.changelogType = "html"
    mainFile.changelog = file("$project.buildDir/doc/changelog.html")
}

tasks.modrinth.dependsOn(tasks.build)

modrinth {
    token = "${modrinthApiKey}"
    projectId = modrinth_project_id
    versionNumber = "${version}+${loaderName}"
    versionName = "${project.mod_id}-${version}+${loaderName}"
    versionType = release_type
    uploadFile = remapJar
    gameVersions = ["${project.minecraft_version}", "1.21.1"]
    loaders = ["fabric", "quilt"]
    changelog = file("/build/doc/changelog.html").exists() ? file("/build/doc/changelog.html").text : null
    dependencies {
        required.project "journeymap"
    }
}

// Ensure build is done prior to cursegradle tasks
project.afterEvaluate {
    project.tasks.findAll { task -> (task.name.startsWith('curseforge') || task.name.startsWith('modrinth')) && (task.name != 'curseforge' || task.name != 'modrinth')
    }.each { projectTask -> projectTask.dependsOn build
    }
}

tasks.withType(PublishToMavenRepository) { task -> task.dependsOn remapJar }

publishing {
    repositories {
        maven {
            name = "JourneyMap"
            url = uri("https://jm.gserv.me/repository/maven-releases/")

            credentials {
                username = project.findProperty("journeymap.user") ?: System.getenv("JOURNEYMAP_WEB_USER")
                password = project.findProperty("journeymap.password") ?: System.getenv("JOURNEYMAP_WEB_PASSWORD")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version "${project.version}"
            artifact remapJar
        }
    }
}
